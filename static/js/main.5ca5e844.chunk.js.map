{"version":3,"sources":["icons/halloween-black-cat.svg","icons/spell.svg","icons/skull.svg","icons/halloween.svg","icons/star.svg","icons/student.svg","icons/brain.svg","serviceWorker.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","CardList","listOfCharacters","className","props","map","value","index","Card","key","character","name","role","house","ministryOfMagic","orderOfThePhoenix","dumbledoresArmy","deathEater","bloodStatus","species","teamPlayer","push","listItems","src","student","skull","brain","magic","star","alt","App","state","characters","searchField","spells","flagCastASpell","flagSpellInAction","randonSpellNumber","event","this","setState","target","randomSpellNumber","Math","round","random","fetch","then","res","json","result","filteredCharacters","filter","toLocaleLowerCase","includes","spell","CastASpellClass","spellBtnImg","animateSpell","length","cat","spellPicture","type","placeholder","onChange","handleChange","effect","join","onClick","handleClick","castSpell","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ca5e844.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/halloween-black-cat.b9454041.svg\";","module.exports = __webpack_public_path__ + \"static/media/spell.12d79651.svg\";","module.exports = __webpack_public_path__ + \"static/media/skull.343185ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/halloween.a08c5f5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/star.dfe50558.svg\";","module.exports = __webpack_public_path__ + \"static/media/student.a1ff269b.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.014560c0.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport cat from './icons/halloween-black-cat.svg';\nimport spellPicture from './icons/spell.svg';\nimport skull from './icons/skull.svg';\nimport magic from './icons/halloween.svg';\nimport star from './icons/star.svg';\nimport student from './icons/student.svg';\nimport brain from './icons/brain.svg';\n\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      characters: [],\n      searchField: \"\",\n      spells: [],\n      flagCastASpell: false,\n      flagSpellInAction: false,\n      randonSpellNumber: null,\n    };\n\n  }\n\n  handleChange(event) {\n    this.setState({\n      searchField: event.target.value,\n      })\n  }\n\n  handleClick() {\n    this.setState({\n      flagCastASpell: true,\n      randomSpellNumber: Math.round(Math.random() * 150, 0),\n    })\n  }\n\n  castSpell() {\n    this.setState({\n      flagSpellInAction: true,\n    })\n  }\n\n  componentDidMount() {\n    fetch(\"https://www.potterapi.com/v1/characters?key=$2a$10$zaAYmnF8pkJKPm1CyyrYluWrAaLBdiiNKDA241lTtzwqe.LoyzFrG\")\n    .then(res => res.json())\n    .then((result) => {\n      this.setState({\n        characters: result,\n      });   \n    });\n    fetch(\"https://www.potterapi.com/v1/spells?key=$2a$10$zaAYmnF8pkJKPm1CyyrYluWrAaLBdiiNKDA241lTtzwqe.LoyzFrG\")\n    .then(res => res.json())\n    .then((result) => {\n      this.setState({\n        spells: result,\n      });   \n    });\n  }\n\n  render() {\n    const {characters, spells, flagCastASpell, flagSpellInAction, randomSpellNumber} = this.state;\n    const filteredCharacters = this.state.characters.filter(value =>\n      value.name.toLocaleLowerCase().includes(this.state.searchField.toLocaleLowerCase()));\n    const spell = spells[randomSpellNumber];\n    const CastASpellClass = flagCastASpell ? \"cast-spell\" : \"invisible\";\n    let spellBtnImg = [\"pick-spell\"];\n    spellBtnImg.push(!flagCastASpell ? \"before-click\" : \"after-click\");\n    const animateSpell = flagSpellInAction ? \"animate-spell\" : \"\";\n    return (\n      (!characters.length || !spells.length)?\n      <h1>Loading</h1> :\n      <div>\n        <header>\n          <h1>\n            Search for a certain person from <span>Harry Potter</span>\n            <img src={cat} alt=\"cat\" /> universe and\n            <br/>\n            <img src={spellPicture} alt=\"spell\" />\n            &nbsp; cast a spell on him or her\n          </h1>\n        </header>\n        <div className=\"flex-column center\">\n          <input type=\"text\" placeholder=\"  Type name\" onChange={(event) => this.handleChange(event)}></input>\n            <div className=\"flex-column center\">\n              <span className={animateSpell}>{flagCastASpell ? spell.spell : \"\"}</span>\n              <p>{flagCastASpell ? spell.effect : \"\"}</p>\n            <div className=\"flex-row center\">\n              <button className={spellBtnImg.join(\" \")} onClick={() => this.handleClick()}></button>             \n              <button className={CastASpellClass} onClick={() => this.castSpell()}>Cast this spell</button>\n            </div>\n        </div>\n      </div>\n\n        <CardList props= {filteredCharacters} />\n\n      </div>\n    )\n  }\n}\n\nfunction CardList ( listOfCharacters ) {\n  return (\n    <div className=\"card-list\">\n      {listOfCharacters.props.map(\n        (value, index) => \n        <Card \n          key={index}\n          character={value} \n        />)\n      }\n    </div>\n  )\n}\n\n\nfunction Card (props) {\n  const { name, role, house, ministryOfMagic, orderOfThePhoenix, dumbledoresArmy, deathEater, bloodStatus, species } = props.character;\n  const teamPlayer = [];\n  deathEater && role === \"\" ? teamPlayer.push(\"DeathEater\") : teamPlayer.push(\"\");\n  ministryOfMagic ? teamPlayer.push(\"Worked in the Ministry of Magic\") : teamPlayer.push(\"\");\n  dumbledoresArmy ? teamPlayer.push(\"Joined the Dumbldore's Army\") : teamPlayer.push(\"\");\n  orderOfThePhoenix ? teamPlayer.push(\"One of the Order of the Phoenix\") : teamPlayer.push(\"\");\n\n  const listItems = teamPlayer.map((value, index) => {\n      if (value !== \"\") {\n        return <li key={index}>{value}</li>        \n      } else return null;\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-heading\">\n        <h1>{name}</h1>\n        <h2>{role ? role : (deathEater ? \"DeathEater\" : \"Other\")}{ house ? \", \" + house : \"\"}</h2>\n      </div>\n      <img src={ role === 'student' ? student : (deathEater ? skull : (bloodStatus === 'muggle' ? brain : (species === 'human' ? magic : star)))} alt=\"role description\" />\n      <ul>\n        <li>Species: {species}</li>\n        <li>Bloodstatus: {bloodStatus}</li>\n      </ul>\n        <ul>\n          {listItems}\n        </ul>\n    </div>\n  )\n  }\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}